(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{267:function(e,t,a){"use strict";a.r(t);var i=a(38),o=Object(i.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"introduzione"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduzione","aria-hidden":"true"}},[e._v("#")]),e._v(" Introduzione")]),e._v(" "),a("p",[e._v("In questo primo capitolo di introduzione parleremo brevemente degli aspetti che caratterizzano questo progetto di esame, come gli strumenti utilizzati e la struttura delle cartelle che lo compongono.")]),e._v(" "),a("p",[e._v("Come prima cosa vogliamo sottolineare che l'intero progetto è stato realizzato in C++ facendo uso sia delle librerie standard del linguaggio che delle seguenti librerie:")]),e._v(" "),a("ul",[a("li",[e._v("OpenGL (3.3+). Nel caso specifico abbiamo fatto uso delle così dette "),a("em",[e._v("Modern OpenGL")]),e._v(", ovvero abbiamo del tutto evitato l'utilizzo della "),a("em",[e._v("fixed pipeline")]),e._v(" di OpenGL. Per questo motivo è stato necessario realizzare tutti gli shader obbligatori per renderizzare un modello a schermo ("),a("em",[e._v("vertex")]),e._v(" e "),a("em",[e._v("fragment shaders")]),e._v(").")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://www.libsdl.org/index.php",target:"_blank",rel:"noopener noreferrer"}},[e._v("SDL2"),a("OutboundLink")],1),e._v(". Utilizzata per la creazione della finestra di gioco e per la gestione degli input da mouse e tastiera.")]),e._v(" "),a("li",[e._v("SDL2_image. Per il caricamento di file immagine utilizzati come texture.")]),e._v(" "),a("li",[e._v("SDL2_ttf. Per la gestione dei font utilizzati per scriver del testo a schermo.")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/skaslev/gl3w",target:"_blank",rel:"noopener noreferrer"}},[e._v("gl3w"),a("OutboundLink")],1),e._v(". Per caricare e gestire le funzionalità offerte dal core profile di OpenGL.")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://glm.g-truc.net/0.9.9/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("glm"),a("OutboundLink")],1),e._v(". Libreria matematica header only scritta in C++ e pensata per essere utilizzata in programmi di computer grafica. GLM è composta da classi e funzioni progettate ed implementate con le stesse convenzioni e funzionalità di GLSL, e questo la rende perfetta per essere utilizzata in progetti di questo tipo senza dover costruire una propria libreria matematica.")])]),e._v(" "),a("p",[e._v("Per lo sviluppo del software abbiamo utilizzato i seguenti tool:")]),e._v(" "),a("ul",[a("li",[e._v("Per la scrittura del codice abbiamo fatto uso dell'IDE "),a("a",{attrs:{href:"https://www.jetbrains.com/clion/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CLion"),a("OutboundLink")],1),e._v(" nella sua versione gratuita per studenti.")]),e._v(" "),a("li",[e._v("Per la compilazione del progetto abbiamo scelto di utilizzare "),a("a",{attrs:{href:"https://cmake.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CMake"),a("OutboundLink")],1),e._v(", questo per facilitare la fase di compilazione del progetto, sia perchè abbiamo utilizzato delle librerie esterne come indicato nei punti precedenti, sia per rendere più semplice un eventuale sviluppo multipiattaforma.")]),e._v(" "),a("li",[e._v("Come sistema di versioning del software abbiamo utilizzato "),a("a",{attrs:{href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("git"),a("OutboundLink")],1),e._v(" e l'intero progetto è stato poi caricato direttamente su "),a("a",{attrs:{href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("github"),a("OutboundLink")],1),e._v(" nel repository "),a("a",{attrs:{href:"https://github.com/andreagarbugli/cg-exam",target:"_blank",rel:"noopener noreferrer"}},[e._v("andreagarbugli/cg-exam"),a("OutboundLink")],1),e._v(".")])]),e._v(" "),a("p",[e._v("Questo progetto di esame è stato realizzato e testato su Ubuntu 19.04.")]),e._v(" "),a("h2",{attrs:{id:"struttura-del-progetto"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#struttura-del-progetto","aria-hidden":"true"}},[e._v("#")]),e._v(" Struttura del Progetto")]),e._v(" "),a("p",[e._v("Il progetto è strutturato nelle seguenti cartelle e sottocartelle:")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("bin")]),e._v(" Contiene tutti i file che servono in fase di esecuzione del programma compreso il file eseguibile del progetto stesso.")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("assets")]),e._v(" File per il font utilizzato nell'interfaccia grafica.")]),e._v(" "),a("li",[a("code",[e._v("models")]),e._v(" Modelli in formato "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Wavefront_.obj_file",target:"_blank",rel:"noopener noreferrer"}},[e._v("obj"),a("OutboundLink")],1),e._v(" e i rispettivi file dei materiali "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Wavefront_.obj_file#Material_template_library",target:"_blank",rel:"noopener noreferrer"}},[e._v("mtl"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("code",[e._v("shaders")]),e._v(" Vertex e fragment shader scritti nel linguaggio GLSL.")]),e._v(" "),a("li",[a("code",[e._v("textures")]),e._v(" Immagini utilizzate come texture per le mesh, il terreno di gioco e lo skybox.")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("docs")]),e._v(" Cartella che contiene il sito statico della documentazione generato automaticamente da "),a("a",{attrs:{href:"https://vuepress.vuejs.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vuepress"),a("OutboundLink")],1),e._v(".")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("docs-dev")]),e._v(": Insieme di file markdown per lo sviluppo della documentazione.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("extern")]),e._v(" Librerie di terze parti utilizzate nel programma come indicato all'inizio del capitolo "),a("router-link",{attrs:{to:"/"}},[e._v("introduttivo")])],1)]),e._v(" "),a("li",[a("p",[a("code",[e._v("src")]),e._v(" Questa cartella contiene tutto il codice C++ del programma ed è a sua volta suddivisa in sottocartelle per i vari moduli del sistema:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("engine")]),e._v(" Contiene il codice core del programma come le classi per la creazione e gestione della finestra di gioco e degli input, oltre alle classi basi per l'applicazione e gli oggetti di gioco")]),e._v(" "),a("li",[a("code",[e._v("game")]),e._v(" Cartella dove sono presenti tutte le classi specifiche del gioco, ovvero le classi che rappresentano i vari oggetti della scena.")]),e._v(" "),a("li",[a("code",[e._v("graphics")]),e._v(" Contiene tutte le classi che astraggono e fanno da wrapper alle funzioni di OpenGL, in questo modo risulta più semplice la gestione di "),a("em",[e._v("mesh")]),e._v(", "),a("em",[e._v("luci")]),e._v(", "),a("em",[e._v("texture")]),e._v(" e tutti gli altri elementi grafici.")]),e._v(" "),a("li",[a("code",[e._v("math")]),e._v(" Contiene un piccolo file utilty con alcune funzioni matematiche.")]),e._v(" "),a("li",[a("code",[e._v("shaders")]),e._v(" Contiene tutte le classi wrapper per gli shader utilizzati nel gioco.")]),e._v(" "),a("li",[a("code",[e._v("utils")]),e._v(" Contiene una piccola libreria per il caricamento sia di file "),a("code",[e._v(".obj")]),e._v(" che dei file "),a("code",[e._v(".mtl")]),e._v(" ad essi associati (ovvero i file dei materiali).")])]),e._v(" "),a("p",[e._v("In ogni cartella è presente anche un file "),a("code",[e._v("CMakeLists.txt")]),e._v(" che consente a "),a("code",[e._v("cmake")]),e._v(" di mantenere i riferimenti ai file C++ e di conseguenza di gestire il progetto sia in fase di sviluppo che di compilazione. In questo modo è possibile avere strumenti come l'autocompletamento del codice o spostarsi dalle dichiarazioni di funzioni, classi e oggetti alla loro definizione. Logicamente per utilizzare questa funzioni occorre un IDE che supporti cmake come nel caso di CLion (oppure VS Code tramite apposita estensione).")])])]),e._v(" "),a("p",[e._v("Nella prossima sezione spiegheremo i passi necessari per compilare ed eseguere il progetto d'esame, mentre nei prossimi capitoli approfondiremo alcuni dei file presenti all'interno della cartella "),a("code",[e._v("src")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"compilazione-ed-esecuzione-del-progetto"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compilazione-ed-esecuzione-del-progetto","aria-hidden":"true"}},[e._v("#")]),e._v(" Compilazione ed esecuzione del progetto")]),e._v(" "),a("p",[e._v("Nella seguente sezione verranno specificati i passaggi essenziali per compilare ed eseguire il progetto su sitemi linux.")]),e._v(" "),a("p",[e._v("Gli step da compiere sono:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Assicurarsi di avere installate nel computer le seguenti librerie "),a("code",[e._v("libsdl2-dev, libsdl2-ttf-dev, libsdl2-image-dev")]),e._v(", e nel caso non fossero presenti installarle tramite terminale con il comando:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("packet-name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Assicurarsi di avere installato anche "),a("code",[e._v("cmake")]),e._v(", oppure installarlo tramite il seguente comando:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" cmake\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Tutte le altre librerie utilizzate nel progetto sono incluse sotto forma di codice all'interno della cartella "),a("code",[e._v("extern")]),e._v(" del progetto e pertanto verranno compilate insieme al progetto stesso tramite cmake.")])]),e._v(" "),a("li",[a("p",[e._v("A questo punto occorre effettuare i seguenti passi per compilare con cmake:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Creazione di una cartella per la build e configurazione del progetto con cmake:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# portarsi all'interno della root del progetto,")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" cg-exam\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# crea la cartella per la compilazione")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# e sposta al suo interno.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" build "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" build\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# configura il progetto tramite cmake.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# -DCMAKE_BUILD_TYPE={build-type} serve per compilare")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# il progetto con o senza ottimizzazioni, i valori")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# possibili sono:")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   - Release (consigliato)")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   - Debug")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   - RelWithDebInfo")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   - MinSizeRel")]),e._v("\ncmake -DCMAKE_BUILD_TYPE"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("Release "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Diamo per scontato che i seguenti passi siano stati eseguiti in un sistema Linux e che quindi il tool di building selezionato automaticamente da cmake sia "),a("code",[e._v("make")]),e._v(", occorre ora eseguire il comando:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# esegue la compilazione vera e propria del progetto.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# -j {nproc} serve per compilare il progetto usando")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# più processori.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" -j "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),e._v("\n")])])])])])]),e._v(" "),a("li",[a("p",[e._v("Se i passaggi precedenti saranno andati a buon fine, all'interno della cartella "),a("code",[e._v("bin")]),e._v(" verrà generato il file eseguibile del progetto, il quale potrà essere eseguito in questo modo:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("./cg-exam\n")])])])])])])},[],!1,null,null,null);t.default=o.exports}}]);